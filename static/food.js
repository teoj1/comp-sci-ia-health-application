const DAILY_MACROS = {
    calories: 1800,
    protein: 75,
    carbs: 350,
    fat: 50
};

let macroTotals = {
    calories: 0,
    protein: 0,
    carbs: 0,
    fat: 0
};

document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('generateMealsBtn').addEventListener('click', loadMeals);
    updateMacroSummary(); // Initialize summary on page load
});


function loadMeals() {
    fetch('/recommend?user_id=' + window.currentUserId)
        .then(response => response.json())
        .then(data => displayMeals(data));
}


function displayMeals(meals) {
    const mealSections = document.getElementById('mealSections');
    mealSections.innerHTML = '';
    ['breakfast', 'lunch', 'dinner', 'snacks'].forEach(type => {
        if (meals[type] && Array.isArray(meals[type]) && meals[type].length > 0) {
            const section = document.createElement('div');
            section.innerHTML = `<h2>${type.charAt(0).toUpperCase() + type.slice(1)}</h2>`;
            section.innerHTML += meals[type].map((meal, idx) => `
                <div class="meal-card" data-type="${type}" data-idx="${idx}">
                    <h3>${meal.description}</h3>
                    <p>Ingredients: ${Array.isArray(meal.ingredients) ? meal.ingredients.join(', ') : meal.ingredients}</p>
                    <p>Calories: ${meal.nutrition.calories} kcal</p>
                    <p>Protein: ${meal.nutrition.protein}g</p>
                    <p>Macronutrients: ${meal.nutrition.protein}g protein, ${meal.nutrition.carbs}g carbohydrates, ${meal.nutrition.fat}g fat</p>
                    <button class="eat-meal-btn">I've eaten this meal</button>
                </div>
            `).join('');
            mealSections.appendChild(section);
        }
    });

    // Add event listeners for "eat" buttons
    document.querySelectorAll('.eat-meal-btn').forEach((btn, i) => {
        btn.addEventListener('click', function() {
            const card = btn.closest('.meal-card');
            const type = card.getAttribute('data-type');
            const idx = card.getAttribute('data-idx');
            const meal = meals[type][idx];
            confirmMeal(meal);
        });
    });
}

// Add this function to send meal info to backend and update history
// (Function confirmMeal was generated by Github Copilot)
function confirmMeal(meal) {
    const mealData = {
        user_id: window.currentUserId,
        date: new Date().toISOString().slice(0, 10),
        calories: meal.nutrition.calories,
        protein: meal.nutrition.protein,
        carbs: meal.nutrition.carbs,
        fat: meal.nutrition.fat,
        description: meal.description,
        ingredients: meal.ingredients
    };

    fetch('/record_calories', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(mealData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.message) {
            alert('Meal logged!');
            addMealToHistory(mealData);
            updateMacroSummary();
        } else {
            alert('Error logging meal.');
        }
    });
}

// Updating Meal History UI to allow the user to see their logged meals 
function addMealToHistory(meal) {
    const historyList = document.getElementById('mealHistoryList');
    const entry = document.createElement('tr');
    entry.innerHTML = `
        <td>${meal.date}</td>
        <td>${meal.description}</td>
        <td>${Array.isArray(meal.ingredients) ? meal.ingredients.join(', ') : meal.ingredients}</td>
        <td>${meal.calories} kcal</td>
        <td>${meal.protein}</td>
        <td>${meal.carbs}</td>
        <td>${meal.fat}</td>
    `;
    historyList.prepend(entry);

    // Update macro totals
    macroTotals.calories += Number(meal.calories) || 0;
    macroTotals.protein += Number(meal.protein) || 0;
    macroTotals.carbs += Number(meal.carbs) || 0;
    macroTotals.fat += Number(meal.fat) || 0;
    updateMacroSummary();
}

const mealImageInput = document.getElementById('mealImageInput');
if (mealImageInput) {
    mealImageInput.addEventListener('change', handleImageUpload);
}

const mealForm = document.getElementById('mealForm');
if (mealForm) {
    mealForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const mealData = {
            user_id: window.currentUserId,
            date: new Date().toISOString().slice(0, 10),
            description: document.getElementById('mealName').value,
            ingredients: document.getElementById('mealDescription').value,
            calories: 0,
            protein: 0,
            carbs: 0,
            fat: 0
        };
        fetch('/record_calories', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(mealData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                alert('Meal logged!');
                addMealToHistory(mealData);
            } else {
                alert('Error logging meal.');
            }
        });
    });
}



function updateMacroSummary() {
    document.getElementById('macroCalories').textContent = `Calories: ${macroTotals.calories} / ${DAILY_MACROS.calories} kcal`;
    document.getElementById('macroProtein').textContent = `Protein: ${macroTotals.protein} / ${DAILY_MACROS.protein}g`;
    document.getElementById('macroCarbs').textContent = `Carbs: ${macroTotals.carbs} / ${DAILY_MACROS.carbs}g`;
    document.getElementById('macroFat').textContent = `Fat: ${macroTotals.fat} / ${DAILY_MACROS.fat}g`;
}